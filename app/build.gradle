plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.firebase.appdistribution'
    id 'com.google.gms.google-services'
}
apply from: '../versions.gradle'

android {
    namespace 'com.fireblocks.sdkdemo'
    compileSdk 34

    defaultConfig {
        applicationId "com.fireblocks.ncwdemo"
        minSdk 27
        targetSdk 34
        versionCode demoVersionCode
        versionName demoVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        archivesBaseName = "FireblocksSdkDemo-v$versionName"+"_"+"$versionCode"

        vectorDrawables {
            useSupportLibrary true
        }
    }

    aaptOptions {
        additionalParameters =["--warn-manifest-validation"]
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            debuggable true
        }
    }
    // Specifies one flavor dimension.
    flavorDimensions += "server"
    flavorDimensions += "wallet"

    productFlavors {
        dev {
            dimension "server"
            applicationIdSuffix ".dev"
        }
        sandbox {
            dimension "server"
            applicationIdSuffix ""
            getIsDefault().set(true)
        }
        production {
            dimension "server"
            applicationIdSuffix ".prod"
        }
        ncw {
            dimension "wallet"
        }
        embeddedWallet {
            dimension "wallet"
            applicationId "com.fireblocks.ewdemo"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api"
    }
    buildFeatures {
        viewBinding true
        buildConfig true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.3"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.aar"])
    implementation(name:'prefs-release', ext:'aar')
    implementation(name:'biometric-release', ext:'aar')

    implementation platform("org.jetbrains.kotlin:kotlin-bom:$kotlin_version")

    implementation(libs.androidx.navigation.compose)
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose

    // Compose
    implementation platform(libs.androidx.compose.bom)
    androidTestImplementation platform(libs.androidx.compose.bom)
    implementation libs.ui
    implementation libs.ui.graphics
    implementation libs.material3
    implementation libs.material.icons.extended
    implementation libs.androidx.compose.material.material
    // Android Studio Preview support
    implementation libs.androidx.ui.tooling.preview
    debugImplementation libs.androidx.ui.tooling


    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.viewmodel.compose

    testImplementation libs.junit
    androidTestImplementation libs.androidx.ui.test.junit4
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core

    debugImplementation libs.androidx.ui.test.manifest

    def useProductionFlavor = project.hasProperty('useProductionFlavor') ? project.getProperty('useProductionFlavor') : "false"
    def artifactIdPrefix = useProductionFlavor.toBoolean() ? "" : "-dev"
    println("artifactIdPrefix: " + artifactIdPrefix + ", useEmbeddedWallet: " + useEmbeddedWallet + ", useProductionFlavor: " + useProductionFlavor + ", fireblocksBomVersion: " + fireblocksBomVersion)
    if (useBom.toBoolean() == true) {
        // Use BOM for Fireblocks SDKs
        println("use com.fireblocks.sdk:bom$artifactIdPrefix:$fireblocksBomVersion")
        implementation(platform("com.fireblocks.sdk:bom$artifactIdPrefix:$fireblocksBomVersion"))
    }
    implementation "com.fireblocks.sdk:ncw$artifactIdPrefix"
    if (useEmbeddedWallet.toBoolean()) {
        // define dependencies without versions
        embeddedWalletImplementation "com.fireblocks.sdk:ew$artifactIdPrefix"
    }

//    productionImplementation "com.fireblocks.sdk:ncw:$sdkVersionName"
//    sandboxImplementation "com.fireblocks.sdk:ncw:$sdkVersionName"
//
//    println("useProductionPublicRepo: " + useProductionPublicRepo)
//    if (useProductionPublicRepo.toBoolean() == false) {
//        println("get sdk from dev private repo")
//        devImplementation "com.fireblocks.sdk:ncw-dev:$sdkVersionName"
//    }

    implementation libs.timber
    //network
    implementation(libs.retrofit) {
        exclude group: 'com.google.code.gson'
    }
    implementation libs.converter.gson
    implementation libs.converter.scalars
    implementation libs.okhttp
    implementation libs.logging.interceptor
    implementation libs.gson

    //Coil for compose
    api libs.coil.compose

    implementation libs.accompanist.systemuicontroller

    // Import the BoM for the Firebase platform
    implementation(platform(libs.firebase.bom))
    implementation libs.firebase.analytics.ktx
    
    // Add the dependency for the Firebase Authentication library
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation(libs.firebase.auth.ktx)

    // Also add the dependency for the Google Play services library and specify its version
    implementation(libs.play.services.auth)

    // Zxing
    implementation libs.core
    implementation(libs.zxing.android.embedded)

    // Guava
    implementation libs.guava
    // Guava fix
    implementation libs.listenablefuture

    //Drive
    implementation(libs.google.api.client.android) {
        exclude group: 'org.apache.httpcomponents'
        exclude module: 'guava-jdk5'
    }
    implementation(libs.google.api.services.drive) {
        exclude group: 'org.apache.httpcomponents'
        exclude module: 'guava-jdk5'
    }
    // get WIF for Bitcoin asset
    implementation(libs.bitcoinj.core)
}