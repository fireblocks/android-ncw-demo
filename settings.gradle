pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        maven { url="https://jitpack.io" }
        flatDir {
            dirs("libs")
        }
    }
}

def gitlabMavenUrl = getProperties().get("gitlabMavenUrl")
def gitlabDeployToken = getProperties().get("gitlabDeployToken")

println("useProductionPublicRepo: " + useProductionPublicRepo)
println("useLocalProperties: " + useLocalProperties)

if (useProductionPublicRepo.toBoolean() == false && useLocalProperties.toBoolean() == true) {
    println("get sdk from dev private repo")
    Properties localProperties = new Properties()
    localProperties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
    gitlabMavenUrl = localProperties['gitlabPrivateMavenUrl']
    gitlabDeployToken = localProperties['gitlabPrivateDeployToken']
}

println("gitlabMavenUrl: " + gitlabMavenUrl)

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven { url="https://jitpack.io" }
        if (useLocalDeploy.toBoolean()) {
            maven {url = "file://$rootDir/../../android-sdk/sdk/deploy"}
        } else {
            maven {
                name = "android-sdk"
                url gitlabMavenUrl
    //            url "https://gitlab.com/api/v4/projects/$mavenProject/packages/maven"
                credentials(HttpHeaderCredentials) {
                    name = "Deploy-Token"
                    value = gitlabDeployToken // to get it from the gradle.properties just use gitlabDeployToken
                }
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
        }
        flatDir {
            dirs("libs")
        }
    }
}
rootProject.name = "Fireblocks NCW Demo"
include ':app'
